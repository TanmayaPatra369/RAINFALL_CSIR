# -*- coding: utf-8 -*-
"""JUNE ANALYSIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wG92sfv2GArSnz0MEiWP5W906nRut6bd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/POWER_Point_Daily_19810101_20240430_012d97N_077d59E_LST (1).csv')

"""# DATA PREPARATION"""

df.head()

df = df.drop(df.index[:19])
select = ['-BEGIN HEADER-','Unnamed: 1','Unnamed: 5']
ndf = df[select]
cols = ['year','dayno.','rainfall']
ndf.columns = cols
ndf.head()

ndf.apply(pd.isnull).sum()

"""# TAKING THE MONTH OF JUNE FOR ANALYSIS ONLY"""

ndf.loc[:, 'rainfall'] = ndf['rainfall'].astype(float)
ndf.loc[:, 'year'] = ndf['year'].astype(int)
total = ndf['rainfall'].sum()
total

ndf['dayno.'] = ndf['dayno.'].astype(int)
selected_days = ndf[(ndf['dayno.'] >= 150) & (ndf['dayno.'] <= 180)]
june_rain = selected_days.groupby('year')['rainfall'].sum().reset_index()

june_rain

actual_rainfall = june_rain['rainfall']
years = june_rain['year']

plt.figure(figsize=(12, 6))
plt.plot(years, actual_rainfall, marker='o', color='blue', linestyle='-')
plt.title('Year vs Rainfall From 1981 to 2023 for only June')
plt.xlabel('Year')
plt.ylabel('Rainfall ffron june to septempber (mm)')
plt.grid(True)
plt.show()

"""# PREDICTION OF RAIN USING LINEAR REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
actual_rainfall = june_rain['rainfall']
years = june_rain['year']
X = june_rain[['year']]
y = june_rain['rainfall']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred = lr_model.predict(X_test)
Y_pred_train = lr_model.predict(X_train)

result_df_train = pd.DataFrame({'Year': X_train.values.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': Y_pred_train})
result_df_train['Absolute Error'] = abs(result_df_train['Actual Rainfall'] - result_df_train['Predicted Rainfall'])
result_df_train

result_df = pd.DataFrame({'Year': X_test['year'], 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

result_df['Absolute Error'] = abs(result_df['Actual Rainfall'] - result_df['Predicted Rainfall'])
result_df

result_df_combined = pd.concat([result_df_train, result_df])
result_df_combined['Percentage Error'] = abs(result_df_combined['Actual Rainfall'] - result_df_combined['Predicted Rainfall']) / result_df_combined['Actual Rainfall'] * 100
result_df_combined

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Year']
  ys = series['Predicted Rainfall']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = result_df_combined.sort_values('Year', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Year')
_ = plt.ylabel('Predicted Rainfall')

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(result_df_combined['Year'], result_df_combined['Percentage Error'], color='blue')
plt.xlabel('Year')
plt.ylabel('Percentage Error')
plt.title('Percentage Error by Year')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines for better readability
plt.tight_layout()

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(result_df_combined['Year'], result_df_combined['Actual Rainfall'], color='blue')
plt.xlabel('Year')
plt.ylabel('Actual Rainfall')
plt.title('Actual Rainfall by Year')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines for better readability
plt.tight_layout()

mean_error_LinearRegression = result_df_combined['Percentage Error'].mean()
mean_error_LinearRegression

plt.figure(figsize=(12, 6))
plt.plot(june_rain['year'], june_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df['Year'], result_df['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df['Year'], result_df['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# SVM"""

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
actual_rainfall = june_rain['rainfall']
years = june_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
svm_model = SVR(kernel='rbf')
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)
y_pred_svm = svm_model.predict(X_train)

result_df_svm = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_svm})
result_df_svm['Absolute Error'] = abs(result_df_svm['Actual Rainfall'] - result_df_svm['Predicted Rainfall'])
result_df_svm

rdf_svm = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})
rdf_svm

rdf_svm['Absolute Error'] = abs(rdf_svm['Actual Rainfall'] - rdf_svm['Predicted Rainfall'])
rdf_svm

combine_svm = pd.concat([result_df_svm, rdf_svm], ignore_index = False)
combine_svm['Percentage Error'] = abs(combine_svm['Actual Rainfall'] - combine_svm['Predicted Rainfall']) / combine_svm['Actual Rainfall'] * 100
combine_svm

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Year']
  ys = series['Predicted Rainfall']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = combine_svm.sort_values('Year', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Year')
_ = plt.ylabel('Predicted Rainfall')

combine_svm['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.bar(combine_svm['Year'], combine_svm['Actual Rainfall'], color='blue')
plt.title('Year vs Actual Rainfall By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 6))
plt.bar(combine_svm['Year'], combine_svm['Percentage Error'], color='blue')
plt.title('Year vs Percentage Error By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# POLYNOMIAL REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
actual_rainfall = june_rain['rainfall']
years = june_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
poly = PolynomialFeatures(degree=10)
X_poly = poly.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)
poly_model = LinearRegression()
poly_model.fit(X_train, y_train)
y_pred = poly_model.predict(X_test)
y_pred_poly = poly_model.predict(X_train)

X_train_years = X_train[:, 1]
result_train = pd.DataFrame({
    'Year': X_train_years,
    'Actual Rainfall': y_train,
    'Predicted Rainfall': y_pred_poly
})
result_train['error in polynomial regression'] = abs(result_train['Actual Rainfall'] - result_train['Predicted Rainfall'])
result_train

X_test_years = X_test[:, 1]
result_df_poly = pd.DataFrame({
    'Year': X_test_years,
    'Actual Rainfall': y_test.values,
    'Predicted Rainfall': y_pred
})
result_df_poly['error in polynomial regression'] = abs(result_df_poly['Actual Rainfall'] - result_df_poly['Predicted Rainfall'])
result_df_poly

combine_poly = pd.concat([result_train, result_df_poly], ignore_index=True)
combine_poly['percentage error'] = abs(combine_poly['Actual Rainfall'] - combine_poly['Predicted Rainfall']) / combine_poly['Actual Rainfall' ] * 100
combine_poly

combine_poly['percentage error'].mean()

def _plot_series(series, series_name, series_index=0):
    palette = list(sns.palettes.mpl_palette('Dark2'))
    xs = series['Year']
    ys = series['error in polynomial regression']

    plt.bar(xs, ys, label=series_name, color=palette[series_index % len(palette)])

# Create a figure and axis with constrained layout
fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')

# Assuming _df_3 is your DataFrame containing 'Year' and 'Predicted Rainfall' columns
df_sorted = combine_poly.sort_values('Year', ascending=True)

# Plot the bar graph
_plot_series(df_sorted, 'Predicted Rainfall')

# Add plot details
sns.despine(fig=fig, ax=ax)
plt.xlabel('Year')
plt.ylabel('Percentage Error')
plt.title('Error Over Years')
plt.legend()
plt.grid(True)
plt.show()

import altair as alt
chart = alt.Chart(combine_poly).mark_line().encode(x='Year', y='Predicted Rainfall')
chart

def _plot_series(series, series_name, series_index=0):
    palette = list(sns.palettes.mpl_palette('Dark2'))
    xs = series['Year']
    ys = series['Actual Rainfall']

    plt.bar(xs, ys, label=series_name, color=palette[series_index % len(palette)])

# Create a figure and axis with constrained layout
fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')

# Assuming _df_3 is your DataFrame containing 'Year' and 'Predicted Rainfall' columns
df_sorted = combine_poly.sort_values('Year', ascending=True)

# Plot the bar graph
_plot_series(df_sorted, 'Actual Rainfall')

# Add plot details
sns.despine(fig=fig, ax=ax)
plt.xlabel('Year')
plt.ylabel('Actual Rainfall')
plt.title('Error Over Years')
plt.legend()
plt.grid(True)
plt.show()

"""# RANDOM FOREST"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestRegressor(n_estimators=11, random_state=42, oob_score = True)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)
y_pred_rf = rf_model.predict(X_train)

result_train_df = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_rf})
result_train_df['Absolute Error'] = abs(result_train_df['Actual Rainfall'] - result_train_df['Predicted Rainfall' ])
result_train_df

result_df_RandomForest = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

absolute_error = abs(result_df_RandomForest['Actual Rainfall'] - result_df_RandomForest['Predicted Rainfall'])
result_df_RandomForest['Absolute Error'] = absolute_error
result_df_RandomForest

combine_rf = pd.concat([result_train_df, result_df_RandomForest], ignore_index=True)
combine_rf['Percentage Error'] = abs(combine_rf['Actual Rainfall'] - combine_rf['Predicted Rainfall']) / combine_rf['Actual Rainfall'] * 100
combine_rf

# prompt: Using dataframe combine_rf: predicted rain vs year plot grph

import altair as alt

chart = alt.Chart(combine_rf).mark_line().encode(
    x='Year',
    y='Predicted Rainfall'
).properties(
    title='Predicted Rainfall vs Year'
)

chart

combine_rf['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.bar(combine_rf['Year'], combine_rf['Percentage Error'], color='blue')
plt.title('Year vs Percentage Error By Random Forest')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 6))
plt.bar(combine_rf['Year'], combine_rf['Actual Rainfall'], color='blue')
plt.title('Year vs Actual Rainfall By Random Forest')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

