# -*- coding: utf-8 -*-
"""Annual Rainfall Qualitative.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VmizzufrDV52vQnuM0kT8QAG5EM01s22
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/POWER_Point_Daily_19810101_20240430_012d97N_077d59E_LST (1).csv')

"""# MAKING THE DATA FRAME READY FOR THE ANLYSIS"""

df

df = df.drop(df.index[:19])

select = ['-BEGIN HEADER-','Unnamed: 1','Unnamed: 5']
ndf = df[select]
ndf.head()

cols = ['year','dayno.','rainfall']
ndf.columns = cols
ndf.head()

ndf.apply(pd.isnull).sum()

"""#CREATE ANNUAL RAINFALL SUM"""

ndf.loc[:, 'rainfall'] = ndf['rainfall'].astype(float)
ndf.loc[:, 'year'] = ndf['year'].astype(int)
total = ndf['rainfall'].sum()
total

ndf = ndf.groupby("year")['rainfall'].sum()

ndf = ndf.reset_index()

ndf.columns

ndf

plt.figure(figsize=(12, 6))
plt.plot(ndf["year"], ndf['rainfall'], marker='o', color='blue', linestyle='-')
plt.title('Year vs Rainfall with the actuall')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.grid(True)
plt.show()



ndf

"""# PERCENTAGE DIFFERNECE ANALYSIS"""

mean_rainfall = ndf['rainfall'].mean()
ndf['percentage_difference'] = ((mean_rainfall - ndf['rainfall']) / mean_rainfall) * 100
ndf

ndf['percentage_difference'].plot()
plt.show()

"""# PERCENTAGE DIFFERENCE PREDICTION USIING LINEAR REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
X = ndf[['year']]
y = ndf['percentage_difference']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)
y_pred = ridge.predict(X_test)

ndf.head()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
X = ndf[['year']]
y = ndf['percentage_difference']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)
y_pred1 = ridge.predict(X_train)

absolute_error_linear_train = np.abs(y_train - y_pred1)
rdf_train = pd.DataFrame({
    'year': X_train['year'],
    'actual_percentage_difference': y_train,
    'predicted_percentage_difference': y_pred1,
    'absolute_error': absolute_error_linear_train
}).reset_index(drop=True)

absolute_error_linear = np.abs(y_test - y_pred)
rdf = pd.DataFrame({
    'year': X_test['year'],
    'actual_percentage_difference': y_test,
    'predicted_percentage_difference': y_pred,
    'absolute_error': absolute_error_linear
}).reset_index(drop=True)

rdf_train

rdf

from matplotlib import pyplot as plt
rdf['predicted_percentage_difference'].plot(kind='line', figsize=(8, 4), title='year')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['year']
  ys = series['predicted_percentage_difference']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = rdf.sort_values('year', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('year')
_ = plt.ylabel('predicted_percentage_difference')
plt.title('Time Series For 40 Years annual Rainfall as Percentage Difference')

import matplotlib.pyplot as plt
plt.figure(figsize=(12, 6))
plt.plot(ndf['year'], ndf['percentage_difference'], marker='o', linestyle='-', color='blue', label='Actual')
plt.plot(rdf['year'], rdf['predicted_percentage_difference'], marker='x', linestyle='--', color='red', label='Predicted')
plt.title('Actual vs Predicted Percentage Difference Over Years')
plt.xlabel('Year')
plt.ylabel('Percentage Difference')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt

# Assuming ndf and rdf are your DataFrames containing 'year', 'percentage_difference', and 'predicted_percentage_difference' columns
plt.figure(figsize=(12, 6))

# Plotting the actual percentage difference as a bar graph
plt.bar(ndf['year'], ndf['percentage_difference'], color='blue', label='Actual')



plt.title('Actual Percentage Difference Over Years')
plt.xlabel('Year')
plt.ylabel('Percentage Difference')
plt.grid(True)
plt.legend()
plt.show()

import matplotlib.pyplot as plt

# Assuming ndf and rdf are your DataFrames containing 'year', 'percentage_difference', and 'predicted_percentage_difference' columns
plt.figure(figsize=(12, 6))



# Plotting the predicted percentage difference as a bar graph with different color
plt.bar(rdf['year'], rdf['predicted_percentage_difference'], color='red', label='Predicted')

plt.title('Predicted Percentage Difference Over Years')
plt.xlabel('Year')
plt.ylabel('Percentage Difference')
plt.grid(True)
plt.legend()
plt.show()

mean_absolute_error_linearRegression = rdf['absolute_error'].mean()
mean_absolute_error_linearRegression

"""# PERCENTAGE DIFFERENCE PREDICTION USIING POLYNOMIAL REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
X = ndf[['year']]
y = ndf['percentage_difference']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
poly_features = PolynomialFeatures(degree=5)
X_train_poly = poly_features.fit_transform(X_train)
X_test_poly = poly_features.transform(X_test)
poly_model = LinearRegression()
poly_model.fit(X_train_poly, y_train)
y_pred = poly_model.predict(X_test_poly)
y_pred_train = poly_model.predict(X_train_poly)

result_df_train = pd.DataFrame({'year': X_train.values.flatten(), 'actual_percentage_difference': y_train, 'predicted_percentage_difference': y_pred_train})
result_df_train['absolute_error'] = abs(result_df_train['actual_percentage_difference'] - result_df_train['predicted_percentage_difference'])
result_df_train

absolute_error_poly = np.abs(y_test - y_pred)
rdf_poly = pd.DataFrame({
    'year': X_test['year'],
    'actual_percentage_difference': y_test,
    'predicted_percentage_difference': y_pred,
    'absolute_error': absolute_error_poly
}).reset_index(drop=True)

rdf_poly

result_df_combined = pd.concat([result_df_train, rdf_poly], ignore_index=False)
result_df_combined

# prompt: Using dataframe result_df_combined: absolute error vs year bar graph

import altair as alt

chart = alt.Chart(result_df_combined).mark_bar().encode(
    x='year',
    y='absolute_error',

).properties(
    width=600
)

chart

import altair as alt
chart = alt.Chart(result_df_combined).mark_line().encode(x='year', y='predicted_percentage_difference')
chart

mean_error_rdf_poly = rdf_poly['absolute_error'].mean()
mean_error_rdf_poly

plt.figure(figsize=(12, 6))
plt.plot(ndf['year'], ndf['percentage_difference'], marker='o', linestyle='-', color='blue', label='Actual')
plt.plot(rdf_poly['year'], rdf_poly['predicted_percentage_difference'], marker='x', linestyle='--', color='red', label='Predicted')
plt.title('Actual vs Predicted Percentage Difference Over Years (Polynomial Regression)')
plt.xlabel('Year')
plt.ylabel('Percentage Difference')
plt.grid(True)
plt.legend()
plt.show()

"""# PERCENTAGE DIFFERENCE PREDICTION USIING SVM ALGORITHM"""

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error
X = ndf[['year']]
y = ndf['percentage_difference']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
svm = SVR(kernel='linear')
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)
y_pred_train = svm.predict(X_train)

result_df_train_svm = pd.DataFrame({'year': X_train.values.flatten(), 'actual_percentage_difference': y_train, 'predicted_percentage_difference': y_pred_train})
result_df_train_svm['absolute_error'] = abs(result_df_train_svm['actual_percentage_difference'] - result_df_train_svm['predicted_percentage_difference'])
result_df_train_svm

import altair as alt
chart = alt.Chart(result_df_train_svm).mark_bar().encode(x='year', y='actual_percentage_difference')
chart

# prompt: Using dataframe result_df_train_svm: actual_percentage_difference vs year bar graph

import altair as alt
chart = alt.Chart(result_df_train_svm).mark_bar().encode(x='year', y='actual_percentage_difference')
chart

# prompt: Using dataframe result_df_train_svm: predicted percentage diff vs year plot as time series

import altair as alt
chart = alt.Chart(result_df_train_svm).mark_line().encode(x='year', y='predicted_percentage_difference')
chart

import altair as alt
chart = alt.Chart(result_df_train_svm).mark_line().encode(x='year', y='predicted_percentage_difference')
chart

absolute_error_svm = np.abs(y_test - y_pred)

rdf_svm = pd.DataFrame({
'year': X_test['year'],
'actual_percentage_difference': y_test,
'predicted_percentage_difference': y_pred,
'absolute_error': absolute_error_svm
}).reset_index(drop=True)

result_df_train_svm_combined = pd.concat([result_df_train_svm, rdf_svm], ignore_index=False)
result_df_train_svm_combined

import altair as alt

chart = alt.Chart(result_df_train_svm_combined).mark_bar().encode(
    x = 'year',
    y = 'absolute_error',

).properties(
    width=600,
    title = "Absolute Error as per year"
)

chart

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['year']
  ys = series['predicted_percentage_difference']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = result_df_train_svm_combined.sort_values('year', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('year')
_ = plt.ylabel('predicted_percentage_difference')
plt.title('Time Series For 40 Years annual Rainfall as Percentage Difference')

result_df_train_svm_combined['absolute_error'].mean()

rdf_svm

mean_absolute_error_SVM = rdf_svm['absolute_error'].mean()
mean_absolute_error_SVM

plt.figure(figsize=(12, 6))
plt.plot(ndf['year'], ndf['percentage_difference'], marker='o', linestyle='-', color='blue', label='Actual')
plt.plot(rdf_svm['year'], rdf_svm['predicted_percentage_difference'], marker='x', linestyle='--', color='red', label='Predicted')
plt.title('Actual vs Predicted Percentage Difference Over Years (SVM Regression)')
plt.xlabel('Year')
plt.ylabel('Percentage Difference')
plt.grid(True)
plt.legend()
plt.show()

"""# PERCENTAGE DIFFERENCE PREDICTION USIING RANDOM FOREST ALGORITHM"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
X = ndf[['year']]
y = ndf['percentage_difference']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_regressor = RandomForestRegressor(random_state=42)
rf_regressor.fit(X_train, y_train)
y_pred = rf_regressor.predict(X_test)
y_pred_train = rf_regressor.predict(X_train)

result_df_train_rf= pd.DataFrame({'year': X_train.values.flatten(), 'actual_percentage_difference': y_train, 'predicted_percentage_difference': y_pred_train})
result_df_train_rf['absolute_error'] = abs(result_df_train_rf['actual_percentage_difference'] - result_df_train_rf['predicted_percentage_difference'])
result_df_train_rf

# prompt: Using dataframe result_df_train_rf: predicted percentage diff vs year in plot

import altair as alt
chart = alt.Chart(result_df_train_rf).mark_line().encode(x='year', y='predicted_percentage_difference')
chart

absolute_error_forest = np.abs(y_test - y_pred)
rdf_RandomForest = pd.DataFrame({
    'year': X_test['year'],
    'actual_percentage_difference': y_test,
    'predicted_percentage_difference': y_pred,
    'absolute_error': absolute_error_forest
}).reset_index(drop=True)

rdf_RandomForest

result_df__combined = pd.concat([result_df_train_rf, rdf_RandomForest], ignore_index=False)
result_df__combined

# prompt: Using dataframe result_df__combined: actual percent diff vs year bar graph

import altair as alt
chart = alt.Chart(result_df__combined).mark_bar().encode(x='year', y='actual_percentage_difference')
chart

rdf_RandomForest['absolute_error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(ndf['year'], ndf['percentage_difference'], marker='o', linestyle='-', color='blue', label='Actual')
plt.plot(rdf_RandomForest['year'], rdf_RandomForest['predicted_percentage_difference'], marker='x', linestyle='--', color='red', label='Predicted')
plt.title('Actual vs Predicted Percentage Difference Over Years (SVM Regression)')
plt.xlabel('Year')
plt.ylabel('Percentage Difference')
plt.grid(True)
plt.legend()
plt.show()

