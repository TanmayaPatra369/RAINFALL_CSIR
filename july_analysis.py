# -*- coding: utf-8 -*-
"""JULY ANALYSIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gq5UCDdKdmSi4mWlVEuFgQg2VvD1B84h
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/POWER_Point_Daily_19810101_20240430_012d97N_077d59E_LST (1).csv')

"""# PREPARING DATA FOR JULY RAINFALL"""

df = df.drop(df.index[:19])
select = ['-BEGIN HEADER-','Unnamed: 1','Unnamed: 5']
ndf = df[select]
cols = ['year','dayno.','rainfall']
ndf.columns = cols
ndf.head()

ndf.apply(pd.isnull).sum()

ndf.loc[:, 'rainfall'] = ndf['rainfall'].astype(float)
ndf.loc[:, 'year'] = ndf['year'].astype(int)
total = ndf['rainfall'].sum()
total

ndf['dayno.'] = ndf['dayno.'].astype(int)
selected_days = ndf[(ndf['dayno.'] >= 180) & (ndf['dayno.'] <= 210)]
july_rain = selected_days.groupby('year')['rainfall'].sum().reset_index()

july_rain

actual_rainfall = july_rain['rainfall']
years = july_rain['year']

plt.figure(figsize=(12, 6))
plt.plot(years, actual_rainfall, marker='o', color='blue', linestyle='-')
plt.title('Year vs Rainfall From 1981 to 2023 for only july')
plt.xlabel('Year')
plt.ylabel('Rainfall ffron july to septempber (mm)')
plt.grid(True)
plt.show()

"""# LINEAR REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
actual_rainfall = july_rain['rainfall']
years = july_rain['year']
X = july_rain[['year']]
y = july_rain['rainfall']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred = lr_model.predict(X_test)
y_pred_train = lr_model.predict(X_train)

result_df_train_lr = pd.DataFrame({'Year': X_train.values.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_train})
result_df_train_lr['Absolute Error'] = abs(result_df_train_lr['Actual Rainfall'] - result_df_train_lr['Predicted Rainfall'])
result_df_train_lr

result_df = pd.DataFrame({'Year': X_test['year'], 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

result_df['Absolute Error'] = abs(result_df['Actual Rainfall'] - result_df['Predicted Rainfall'])
result_df

result_df_combined = pd.concat([result_df_train_lr, result_df])
result_df_combined

result_df_combined.sort_values(by='Year', inplace=True)
result_df_combined['Percentage Error'] = abs(result_df_combined['Actual Rainfall'] - result_df_combined['Predicted Rainfall']) / result_df_combined['Actual Rainfall'] * 100
result_df_combined

from matplotlib import pyplot as plt
result_df_combined['Predicted Rainfall'].plot(kind='line', figsize=(8, 4), title='Predicted Rainfall')
plt.gca().spines[['top', 'right']].set_visible(False)

plt.figure(figsize=(10, 6))
plt.bar(result_df_combined['Year'],result_df_combined['Percentage Error'], color='blue')
plt.xlabel('Year')
plt.ylabel('Percentage Error')
plt.title('Percentage Error in June Rainfall Predictions using Linear Regression')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines for better readability
plt.tight_layout()

plt.figure(figsize=(10, 6))
plt.bar(result_df_combined['Year'],result_df_combined['Actual Rainfall'], color='blue')
plt.xlabel('Year')
plt.ylabel('Actual Rainfall')
plt.title('Percentage Error in June Rainfall Predictions using Linear Regression')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines for better readability
plt.tight_layout()

mean_error_LinearRegression = abs(result_df_combined['Percentage Error']).mean()
mean_error_LinearRegression

plt.figure(figsize=(12, 6))
plt.plot(july_rain['year'], july_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df['Year'], result_df['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df['Year'], result_df['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# SUPPORT VECTOR MACHINE (SVM)"""

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
actual_rainfall = july_rain['rainfall']
years = july_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
svm_model = SVR(kernel='rbf')
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)
y_pred_train = svm_model.predict(X_train)

result_df_train_svm = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_train})
result_df_train_svm['error in svm prediction'] = abs(result_df_train_svm['Actual Rainfall'] - result_df_train_svm['Predicted Rainfall'])
result_df_train_svm

rdf_svm = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})
rdf_svm

rdf_svm['error in svm prediction'] = abs(rdf_svm['Actual Rainfall'] - rdf_svm['Predicted Rainfall'])
rdf_svm

combined_df = pd.concat([result_df_train_svm, rdf_svm])
combined_df['Percentage Error'] = abs(combined_df['Actual Rainfall'] - combined_df['Predicted Rainfall']) / combined_df['Actual Rainfall'] * 100
combined_df

import altair as alt
alt.Chart(combined_df).mark_bar().encode(
    x='Year',
    y='Actual Rainfall',
    color='Actual Rainfall'
).properties(width=600)

import altair as alt
chart = alt.Chart(combined_df).mark_bar().encode(x='Year', y='Percentage Error', color=alt.Color('Year', legend=None))
chart

import altair as alt

chart = alt.Chart(combined_df).mark_line().encode(
    x='Year',
    y='Predicted Rainfall',
    color=alt.value('blue'),
).properties(
    width=600,
    height=400
)

chart

combined_df['Percentage Error'].mean()

mean_error_svm = rdf_svm['error in svm prediction'].mean()
mean_error_svm

"""#POLYNOMIAL REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
actual_rainfall = july_rain['rainfall']
years = july_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
poly = PolynomialFeatures(degree=10)
X_poly = poly.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)
poly_model = LinearRegression()
poly_model.fit(X_train, y_train)
y_pred = poly_model.predict(X_test)
y_pred_train = poly_model.predict(X_train)

X_train_years = X_train[:, 1]
result_train_poly = pd.DataFrame({
    'Year': X_train_years,
    'Actual Rainfall': y_train,
    'Predicted Rainfall': y_pred_train
})
result_train_poly['error in polynomial regression'] = abs(result_train_poly['Actual Rainfall'] - result_train_poly['Predicted Rainfall'])
result_train_poly

X_test_years = X_test[:, 1]
result_df_poly = pd.DataFrame({
    'Year': X_test_years,
    'Actual Rainfall': y_test.values,
    'Predicted Rainfall': y_pred
})
result_df_poly

result_df_poly['error in polynomial regression'] = abs(result_df_poly['Actual Rainfall'] - result_df_poly['Predicted Rainfall'])
result_df_poly



combine_poly = pd.concat([result_train_poly, result_df_poly])
combine_poly['Percentage Error'] = abs(combine_poly['Actual Rainfall'] - combine_poly['Predicted Rainfall']) / combine_poly['Actual Rainfall'] * 100
combine_poly.head()

import altair as alt
chart = alt.Chart(combine_poly).mark_bar().encode(x='Year', y='Actual Rainfall', color='Actual Rainfall')
chart

# prompt: Using dataframe combine_poly: predicted values vs year plot graph

import altair as alt
chart = alt.Chart(combine_poly).mark_line().encode(x='Year', y='Predicted Rainfall')
chart

import altair as alt
chart = alt.Chart(combine_poly).mark_bar().encode(x='Year', y='Percentage Error', color='Year').properties(width=600)
chart

combine_poly['error in polynomial regression'].mean()

combine_poly['Percentage Error'].mean()



"""# RANDOM FOREST"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestRegressor(n_estimators=60, random_state=42, oob_score = True)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)
y_pred_train = rf_model.predict(X_train)

result_train_rf = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_train})
result_train_rf['Absolute Error'] = abs(result_train_rf['Actual Rainfall'] - result_train_rf['Predicted Rainfall'])
result_train_rf

result_df_RandomForest = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

absolute_error = abs(result_df_RandomForest['Actual Rainfall'] - result_df_RandomForest['Predicted Rainfall'])
result_df_RandomForest['Absolute Error'] = absolute_error
result_df_RandomForest

combine_rf = pd.concat([result_train_rf, result_df_RandomForest])
combine_rf['Percentage Error'] = abs(combine_rf['Actual Rainfall'] - combine_rf['Predicted Rainfall']) / combine_rf['Actual Rainfall'] * 100
combine_rf.head()

#actual rain vs year bar graph

import altair as alt

alt.Chart(combine_rf).mark_bar().encode(
    x='Year',
    y='Actual Rainfall',
    color=alt.Color('Actual Rainfall:Q')
).properties(width=600)

# predicted rain vs year plot

import altair as alt
alt.Chart(combine_rf).mark_line().encode(x='Year', y='Predicted Rainfall').properties(width=600)

import altair as alt
chart = alt.Chart(combine_rf).mark_bar().encode(x='Year', y='Percentage Error', color='Year')
chart

combine_rf['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(july_rain['year'], july_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df_RandomForest['Year'], result_df_RandomForest['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df_RandomForest['Year'], result_df_RandomForest['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By Random Forest')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()