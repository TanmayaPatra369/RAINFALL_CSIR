# -*- coding: utf-8 -*-
"""september.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jjgywp_DMNN2QyuOAyXcenKDWfG7Dd3S
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# IMPORTING DATA"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/POWER_Point_Daily_19810101_20240430_012d97N_077d59E_LST (1).csv')

"""# PREPARING DATA FOR ANALYSIS"""

df = df.drop(df.index[:19])
select = ['-BEGIN HEADER-','Unnamed: 1','Unnamed: 5']
ndf = df[select]
cols = ['year','dayno.','rainfall']
ndf.columns = cols
ndf.head()

ndf.apply(pd.isnull).sum()

ndf.loc[:, 'rainfall'] = ndf['rainfall'].astype(float)
ndf.loc[:, 'year'] = ndf['year'].astype(int)
total = ndf['rainfall'].sum()
total

ndf['dayno.'] = ndf['dayno.'].astype(int)
selected_days = ndf[(ndf['dayno.'] >= 240) & (ndf['dayno.'] <= 270)]
steptember_rain = selected_days.groupby('year')['rainfall'].sum().reset_index()

steptember_rain

actual_rainfall = steptember_rain['rainfall']
years = steptember_rain['year']

plt.figure(figsize=(12, 6))
plt.plot(years, actual_rainfall, marker='o', color='blue', linestyle='-')
plt.title('Year vs Rainfall From 1981 to 2023 for only steptember')
plt.xlabel('Year')
plt.ylabel('Rainfall ffron steptember to septempber (mm)')
plt.grid(True)
plt.show()

"""#LINEAR REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
actual_rainfall = steptember_rain['rainfall']
years = steptember_rain['year']
X = steptember_rain[['year']]
y = steptember_rain['rainfall']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred = lr_model.predict(X_test)
y_pred2 = lr_model.predict(X_train)

result_df_train_lr = pd.DataFrame({'Year': X_train.values.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred2})
result_df_train_lr['Absolute Error'] = abs(result_df_train_lr['Actual Rainfall'] - result_df_train_lr['Predicted Rainfall'])
result_df_train_lr

result_df_test_lr = pd.DataFrame({'Year': X_test.values.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})
result_df_test_lr['Absolute Error'] = abs(result_df_test_lr['Actual Rainfall'] - result_df_test_lr['Predicted Rainfall'])
result_df_test_lr

result_df = pd.DataFrame({'Year': X_test['year'], 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

result_df['Absolute Error'] = abs(result_df['Actual Rainfall'] - result_df['Predicted Rainfall'])
result_df

result_df_train_lr_combined = pd.concat([result_df_train_lr, result_df], ignore_index=False)
result_df_train_lr_combined['Percentage Error'] = (result_df_train_lr_combined['Absolute Error'] / result_df_train_lr_combined['Actual Rainfall']) * 100
result_df_train_lr_combined

#  percentage error vs year bar graph

import altair as alt
import altair as alt
chart = alt.Chart(result_df_train_lr_combined).mark_bar().encode(x='Year', y='Percentage Error', color='Year')
chart

#actal rainfall vs year bar graph

import altair as alt
chart = alt.Chart(result_df_train_lr_combined).mark_bar().encode(x='Year', y='Actual Rainfall')
chart

from matplotlib import pyplot as plt
result_df_train_lr_combined['Year'].plot(kind='line', figsize=(8, 4), title='Year')
plt.gca().spines[['top', 'right']].set_visible(False)

result_df_train_lr_combined['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(steptember_rain['year'], steptember_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df['Year'], result_df['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df['Year'], result_df['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# SUPPORT VECTOR MACHINE (SVM)"""

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
actual_rainfall = steptember_rain['rainfall']
years = steptember_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
svm_model = SVR(kernel='rbf')
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)
y_pred_test = svm_model.predict(X_train)

result_df_train_svm = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_test})
result_df_train_svm['Absolute Error'] = abs(result_df_train_svm['Actual Rainfall'] - result_df_train_svm['Predicted Rainfall'])
result_df_train_svm

rdf_svm = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})
rdf_svm

rdf_svm['Absolute Error'] = abs(rdf_svm['Actual Rainfall'] - rdf_svm['Predicted Rainfall'])
rdf_svm

combined_df = pd.concat([result_df_train_svm, rdf_svm], ignore_index=True)
combined_df['Percentage Error'] = (combined_df['Absolute Error'] / combined_df['Actual Rainfall']) * 100
combined_df.head()

#predicted rain vs year plot

import altair as alt
alt.Chart(combined_df).mark_line().encode(
    x='Year',
    y='Predicted Rainfall',
    color=alt.value('red')
).properties(
    title='Predicted Rain vs Year'
)

# actual values vs year bar

import altair as alt

bar = alt.Chart(combined_df).mark_bar().encode(
    x='Year:N',
    y='Actual Rainfall:Q'
).properties(
    width=600
)
bar

#precentage error vs year bar

import altair as alt

bar = alt.Chart(combined_df).mark_bar().encode(
    x='Year:N',
    y='Percentage Error:Q'
).properties(
    width=600
)

bar

combined_df['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(steptember_rain['year'], steptember_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(rdf_svm['year'], rdf_svm['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(rdf_svm['year'], rdf_svm['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# POLYNOMIAL REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
actual_rainfall = steptember_rain['rainfall']
years = steptember_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
poly = PolynomialFeatures(degree=10)
X_poly = poly.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)
poly_model = LinearRegression()
poly_model.fit(X_train, y_train)
y_pred = poly_model.predict(X_test)
y_pred_train = poly_model.predict(X_train)

X_test_years = X_test[:, 1]
result_df_poly = pd.DataFrame({
    'Year': X_test_years,
    'Actual Rainfall': y_test.values,
    'Predicted Rainfall': y_pred
})
result_df_poly

result_df_poly['Absolute Error'] = abs(result_df_poly['Actual Rainfall'] - result_df_poly['Predicted Rainfall'])
result_df_poly

result_train_poly = pd.DataFrame({
    'Year': X_train[:, 1],
    'Actual Rainfall': y_train.values,
    'Predicted Rainfall': y_pred_train
})
result_train_poly['Absolute Error'] = abs(result_train_poly['Actual Rainfall'] - result_train_poly['Predicted Rainfall'])
result_train_poly

combine_poly = pd.concat([result_train_poly, result_df_poly], ignore_index=True)
combine_poly['Percentage Error'] = (combine_poly['Absolute Error'] / combine_poly['Actual Rainfall']) * 100
combine_poly.head()

#actual rain vs year bar

import altair as alt

alt.Chart(combine_poly).mark_bar().encode(
    x='Year',
    y='Actual Rainfall',

).properties(width=600)

# prompt: Using dataframe combine_poly: predicted values vs year plot

import altair as alt
alt.Chart(combine_poly).mark_line().encode(
    x='Year',
    y='Predicted Rainfall',

).properties(
    width=600,
    height=400
)

# percent error vs year bar

import altair as alt
chart = alt.Chart(combine_poly).mark_bar().encode(
    x='Year:N',
    y='Percentage Error:Q'
).properties(
    title='Percent Error vs Year'
)
chart

combine_poly['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(steptember_rain['year'], steptember_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df_poly['Year'], result_df_poly['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df_poly['Year'], result_df_poly['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By Polynomial Regression')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# RANDOM FOREST"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestRegressor(n_estimators=90, random_state=42, oob_score = True)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)
y_pred_train = rf_model.predict(X_train)

result_train_rf = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_train})
result_train_rf['Absolute Error'] = abs(result_train_rf['Actual Rainfall'] - result_train_rf['Predicted Rainfall'] )
result_train_rf

result_df_RandomForest = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

absolute_error = abs(result_df_RandomForest['Actual Rainfall'] - result_df_RandomForest['Predicted Rainfall'])
result_df_RandomForest['Absolute Error'] = absolute_error
result_df_RandomForest

combine_rf = pd.concat([result_train_rf, result_df_RandomForest], ignore_index=True)
combine_rf['Percentage Error'] = (combine_rf['Absolute Error'] / combine_rf['Actual Rainfall']) * 100
combine_rf.head()

#actual values vs year bar

alt.Chart(combine_rf).mark_bar().encode(
    x = alt.X('Year:N', title='Year'),
    y = alt.Y('Actual Rainfall:Q', title='Actual Rainfall (mm)')
).properties(width=600)

#predicted values vs year plot

import altair as alt
alt.Chart(combine_rf).mark_line().encode(x='Year', y='Predicted Rainfall').properties(height=400, width=600)

#percent error vs year bar

import altair as alt
alt.Chart(combine_rf).mark_bar().encode(
    x='Year',
    y='Percentage Error',
    color=alt.Color('Year', legend=None)
).properties(width=600)

combine_rf['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(steptember_rain['year'], steptember_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df_RandomForest['Year'], result_df_RandomForest['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df_RandomForest['Year'], result_df_RandomForest['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By Random Forest')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# rough

"""

X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestRegressor(n_estimators=30, random_state=42, oob_score = True)
rf_model.fit(X_train, y_train)
y_preds = rf_model.predict(X_train)

y_preds

predicted_df = pd.DataFrame({
    'Year': X_train.flatten(),
    'Predicted_Rainfall': y_preds
})

# Create a DataFrame for the actual values
actual_df = pd.DataFrame({
    'Year': years.values,
    'Actual_Rainfall': actual_rainfall
})

# Merge the predicted and actual DataFrames
combined_df = pd.merge(predicted_df, actual_df, on='Year', how='left')
combined_df['error'] = abs(combined_df['Predicted_Rainfall'] - combined_df['Actual_Rainfall'])
combined_df

combined_df['error'].mean()

