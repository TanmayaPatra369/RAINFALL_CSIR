# -*- coding: utf-8 -*-
"""AUGUST ANALYSIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cpzZCpxEAQYZyygUqqRtG5cqrhZt3oXE
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""#LOADING DATA AS DATAFRAME

"""

df = pd.read_csv('/content/drive/MyDrive/POWER_Point_Daily_19810101_20240430_012d97N_077d59E_LST (1).csv')

"""# PREPARING DATA FOR ANALYSIS"""

df = df.drop(df.index[:19])
select = ['-BEGIN HEADER-','Unnamed: 1','Unnamed: 5']
ndf = df[select]
cols = ['year','dayno.','rainfall']
ndf.columns = cols
ndf.head()

ndf.apply(pd.isnull).sum()

ndf.loc[:, 'rainfall'] = ndf['rainfall'].astype(float)
ndf.loc[:, 'year'] = ndf['year'].astype(int)
total = ndf['rainfall'].sum()
total

ndf['dayno.'] = ndf['dayno.'].astype(int)
selected_days = ndf[(ndf['dayno.'] >= 210) & (ndf['dayno.'] <= 240)]
august_rain = selected_days.groupby('year')['rainfall'].sum().reset_index()

august_rain

import matplotlib.pyplot as plt

# Assuming 'august_rain' is a DataFrame with columns 'year' and 'rainfall'
actual_rainfall = august_rain['rainfall']

plt.figure(figsize=(12, 6))
plt.hist(actual_rainfall, bins=20, color='blue', edgecolor='black')
plt.title('Distribution of Rainfall From 1981 to 2023 for Only August')
plt.xlabel('Rainfall (mm)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""#LINEAR REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
actual_rainfall = august_rain['rainfall']
years = august_rain['year']
X = august_rain[['year']]
y = august_rain['rainfall']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred = lr_model.predict(X_test)
y_pred2 = lr_model.predict(X_train)

result_df_train_lr = pd.DataFrame({'Year': X_train.values.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred2})
result_df_train_lr['Absolute Error'] = abs(result_df_train_lr['Actual Rainfall'] - result_df_train_lr['Predicted Rainfall'])
result_df_train_lr

result_df = pd.DataFrame({'Year': X_test['year'], 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

result_df['Absolute Error'] = abs(result_df['Actual Rainfall'] - result_df['Predicted Rainfall'])
result_df

result_df_train_lr_combined = pd.concat([result_df_train_lr, result_df], ignore_index=False)
result_df_train_lr_combined['PERCENTAGE ERROR'] = (abs(result_df_train_lr_combined['Actual Rainfall'] - result_df_train_lr_combined['Predicted Rainfall']) / result_df_train_lr_combined['Actual Rainfall'] * 100)
result_df_train_lr_combined

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(result_df_train_lr_combined['Year'], result_df_train_lr_combined['Actual Rainfall'], color='blue')
plt.xlabel('Year')
plt.ylabel('Actual Rainfall')
plt.title('Actual Rainfall by Year')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines for better readability
plt.tight_layout()

result_df_train_lr_combined['PERCENTAGE ERROR'].mean()

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Year']
  ys = series['Predicted Rainfall']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = result_df_train_lr_combined.sort_values('Year', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Year')
_ = plt.ylabel('Predicted Rainfall')

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(result_df_train_lr_combined['Year'], result_df_train_lr_combined['PERCENTAGE ERROR'], color='blue')
plt.xlabel('Year')
plt.ylabel('PERCENTAGE ERROR')
plt.title('Actual Rainfall by Year')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Add gridlines for better readability
plt.tight_layout()

mean_error_LinearRegression = result_df['Absolute Error'].mean()
mean_error_LinearRegression

plt.figure(figsize=(12, 6))
plt.plot(august_rain['year'], august_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df['Year'], result_df['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df['Year'], result_df['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# SUPPORT VECTOR MACHINE (SVM)"""

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
actual_rainfall = august_rain['rainfall']
years = august_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
svm_model = SVR(kernel='rbf')
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)
y_pred_svm = svm_model.predict(X_train)

r2 = r2_score(y_test, y_pred)
r2

result_train = pd.DataFrame({'Year': X_train.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_svm})
result_train['Absolute Error'] = abs(result_train['Actual Rainfall'] - result_train['Predicted Rainfall'])
result_train

rdf_svm = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})
rdf_svm

rdf_svm['Absolute Error'] = abs(rdf_svm['Actual Rainfall'] - rdf_svm['Predicted Rainfall'])
rdf_svm

combine_svm = pd.concat([result_train, rdf_svm], ignore_index=False)
combine_svm['Percentage Error'] = (abs(combine_svm['Actual Rainfall'] - combine_svm['Predicted Rainfall']) / combine_svm['Actual Rainfall']) * 100
combine_svm.head()

# actual rain vs year bar

import altair as alt
chart = alt.Chart(combine_svm).mark_bar().encode(y='Actual Rainfall', x='Year')
chart

# predicted rain vs year plot

import altair as alt
chart = alt.Chart(combine_svm).mark_line().encode(x='Year', y='Predicted Rainfall')
chart

# percentage error vs year bar

import altair as alt
chart = alt.Chart(combine_svm).mark_bar().encode(x='Year', y='Percentage Error', color='Percentage Error').properties(height=400, width=800)
chart

combine_svm['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(august_rain['year'], august_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(rdf_svm['year'], rdf_svm['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(rdf_svm['year'], rdf_svm['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By SVM')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# POLYNOMIAL REGRESSION"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
actual_rainfall = august_rain['rainfall']
years = august_rain['year']
X = years.values.reshape(-1, 1)
y = actual_rainfall
poly = PolynomialFeatures(degree=10)
X_poly = poly.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)
poly_model = LinearRegression()
poly_model.fit(X_train, y_train)
y_pred = poly_model.predict(X_test)
y_pred_poly = poly_model.predict(X_train)

X_train_years = X_train[:, 1]
result_train_poly = pd.DataFrame({'Year': X_train_years, 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_poly})
result_train_poly['Absolute Error'] = abs(result_train_poly['Actual Rainfall'] - result_train_poly['Predicted Rainfall'])
result_train_poly

X_test_years = X_test[:, 1]
result_df_poly = pd.DataFrame({
    'Year': X_test_years,
    'Actual Rainfall': y_test.values,
    'Predicted Rainfall': y_pred
})
result_df_poly

result_df_poly['Absolute Error'] = abs(result_df_poly['Actual Rainfall'] - result_df_poly['Predicted Rainfall'])
result_df_poly

combine_poly = pd.concat([result_train_poly, result_df_poly], ignore_index=False)
combine_poly['Percentage Error'] = (abs(combine_poly['Actual Rainfall'] - combine_poly['Predicted Rainfall']) / combine_poly['Actual Rainfall']) * 100
combine_poly

alt.Chart(combine_poly).mark_bar().encode(
  x='Year:N',
  y='Actual Rainfall',
).properties(width=600)

import altair as alt
chart = alt.Chart(combine_poly).mark_line().encode(x='Year', y='Predicted Rainfall')
chart

#percentage error vs year bar

import altair as alt

chart = alt.Chart(combine_poly).mark_bar().encode(
    x = 'Year:O',
    y = 'Percentage Error:Q',

).properties(width=600)

chart

combine_poly['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(august_rain['year'], august_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df_poly['Year'], result_df_poly['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df_poly['Year'], result_df_poly['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By Polynomial Regression')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()

"""# RANDOM FOREST"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
X = years.values.reshape(-1, 1)
y = actual_rainfall
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestRegressor(n_estimators=30, random_state=42, oob_score = True)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)
y_pred_rf = rf_model.predict(X_train)

X_train_years = X_train[:, :]
result_train_rf = pd.DataFrame({'Year': X_train_years.flatten(), 'Actual Rainfall': y_train, 'Predicted Rainfall': y_pred_rf})
result_train_rf['Absolute Error'] = abs(result_train_rf['Actual Rainfall'] - result_train_rf['Predicted Rainfall'])
result_train_rf.head(

)

result_df_RandomForest = pd.DataFrame({'Year': X_test.flatten(), 'Actual Rainfall': y_test, 'Predicted Rainfall': y_pred})

absolute_error = abs(result_df_RandomForest['Actual Rainfall'] - result_df_RandomForest['Predicted Rainfall'])
result_df_RandomForest['Absolute Error'] = absolute_error
result_df_RandomForest

combine_rf = pd.concat([result_train_rf, result_df_RandomForest], ignore_index=False)
combine_rf['Percentage Error'] = (abs(combine_rf['Actual Rainfall'] - combine_rf['Predicted Rainfall']) / combine_rf['Actual Rainfall']) * 100
combine_rf.head()

#actual rain vs year bar graph

import altair as alt

chart = alt.Chart(combine_rf).mark_bar().encode(
    x = 'Year:N',
    y = 'Actual Rainfall:Q',

).properties(
    width=600,
    height=400
)

chart

# predicted rain vs year plot

import altair as alt
chart = alt.Chart(combine_rf).mark_line().encode(x='Year', y='Predicted Rainfall')
chart

#percentage error vs year bar

import altair as alt
chart = alt.Chart(combine_rf).mark_bar().encode(
    x='Year:O',
    y='Percentage Error:Q'
).properties(
    width=600
)
chart

combine_rf['Percentage Error'].mean()

plt.figure(figsize=(12, 6))
plt.plot(august_rain['year'], august_rain['rainfall'], label='Actual Rainfall', color='blue', marker='o')
plt.plot(result_df_RandomForest['Year'], result_df_RandomForest['Predicted Rainfall'], color='red', label='Predicted Rainfall', linestyle='--')
plt.scatter(result_df_RandomForest['Year'], result_df_RandomForest['Predicted Rainfall'], color='red', marker='x')
plt.title('Year vs Rainfall (Actual and Predicted) By Random Forest')
plt.xlabel('Year')
plt.ylabel('Rainfall (mm)')
plt.legend()
plt.grid(True)
plt.show()